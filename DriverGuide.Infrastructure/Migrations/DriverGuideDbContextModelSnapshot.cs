// <auto-generated />
using System;
using DriverGuide.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DriverGuide.Infrastructure.Migrations
{
    [DbContext(typeof(DriverGuideDbContext))]
    partial class DriverGuideDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DriverGuide.Domain.Models.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("QuestionId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("QuestionId"));

                    b.Property<DateOnly>("DataDodania")
                        .HasColumnType("date")
                        .HasColumnName("DataDodania");

                    b.Property<string>("Kategorie")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Kategorie");

                    b.Property<int>("Lp")
                        .HasColumnType("int")
                        .HasColumnName("Lp");

                    b.Property<string>("Media")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Media");

                    b.Property<string>("NazwaMediaTlumaczenieMigowePJMtrescA")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NazwaMediaTlumaczenieMigowePJMtrescA");

                    b.Property<string>("NazwaMediaTlumaczenieMigowePJMtrescB")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NazwaMediaTlumaczenieMigowePJMtrescB");

                    b.Property<string>("NazwaMediaTlumaczenieMigowePJMtrescC")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NazwaMediaTlumaczenieMigowePJMtrescC");

                    b.Property<string>("NazwaMediaTlumaczenieMigowePJMtrescPyt")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NazwaMediaTlumaczenieMigowePJMtrescPyt");

                    b.Property<string>("NumerPytania")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("NumerPytania");

                    b.Property<string>("OdpowiedzA")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OdpowiedzA");

                    b.Property<string>("OdpowiedzADE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OdpowiedzADE");

                    b.Property<string>("OdpowiedzAENG")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OdpowiedzAENG");

                    b.Property<string>("OdpowiedzAUA")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OdpowiedzAUA");

                    b.Property<string>("OdpowiedzB")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OdpowiedzB");

                    b.Property<string>("OdpowiedzBDE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OdpowiedzBDE");

                    b.Property<string>("OdpowiedzBENG")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OdpowiedzBENG");

                    b.Property<string>("OdpowiedzBUA")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OdpowiedzBUA");

                    b.Property<string>("OdpowiedzC")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OdpowiedzC");

                    b.Property<string>("OdpowiedzCDE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OdpowiedzCDE");

                    b.Property<string>("OdpowiedzCENG")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OdpowiedzCENG");

                    b.Property<string>("OdpowiedzCUA")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("OdpowiedzCUA");

                    b.Property<string>("PoprawnaOdp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PoprawnaOdp");

                    b.Property<string>("Pytanie")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Pytanie");

                    b.Property<string>("PytanieDE")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PytanieDE");

                    b.Property<string>("PytanieENG")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PytanieENG");

                    b.Property<string>("PytanieUA")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PytanieUA");

                    b.HasKey("QuestionId");

                    b.ToTable("Questions", (string)null);
                });

            modelBuilder.Entity("DriverGuide.Domain.Models.QuestionAnswer", b =>
                {
                    b.Property<string>("QuestionAnswerId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("QuestionAnswerId");

                    b.Property<string>("CorrectQuestionAnswer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CorrectQuestionAnswer");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("EndDate");

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Question");

                    b.Property<int>("QuestionCategory")
                        .HasColumnType("int")
                        .HasColumnName("QuestionCategory");

                    b.Property<string>("QuestionId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("QuestionId");

                    b.Property<string>("QuestionLanguage")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("QuestionLanguage");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("StartDate");

                    b.Property<string>("TestSessionId")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TestSessionId");

                    b.Property<string>("UserQuestionAnswer")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserQuestionAnswer");

                    b.HasKey("QuestionAnswerId");

                    b.ToTable("QuestionAnswers", (string)null);
                });

            modelBuilder.Entity("DriverGuide.Domain.Models.QuestionFile", b =>
                {
                    b.Property<string>("QuestionFileId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("QuestionFileId");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ContentType");

                    b.Property<byte[]>("File")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("File");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateOnly>("UploadDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValue(new DateOnly(2025, 5, 5))
                        .HasColumnName("UploadDate");

                    b.HasKey("QuestionFileId");

                    b.ToTable("QuestionFiles", (string)null);
                });

            modelBuilder.Entity("DriverGuide.Domain.Models.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("DriverGuide.Domain.Models.TestSession", b =>
                {
                    b.Property<string>("TestSessionId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("TestSessionId");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("EndDate");

                    b.Property<double?>("Result")
                        .HasColumnType("float")
                        .HasColumnName("Result");

                    b.Property<DateTimeOffset>("StartDate")
                        .HasColumnType("datetimeoffset")
                        .HasColumnName("StartDate");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("TestSessionId");

                    b.HasIndex("UserId");

                    b.ToTable("TestSessions", (string)null);
                });

            modelBuilder.Entity("DriverGuide.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("DriverGuide.Domain.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000001",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "00000000-0000-0000-0000-000000000002",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DriverGuide.Domain.Models.UserRole", b =>
                {
                    b.HasOne("DriverGuide.Domain.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DriverGuide.Domain.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("DriverGuide.Domain.Models.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("DriverGuide.Domain.Models.User", null)
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("DriverGuide.Domain.Models.User", null)
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("DriverGuide.Domain.Models.User", null)
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DriverGuide.Domain.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DriverGuide.Domain.Models.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Tokens");

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
