@page "/quiz/{Category}"
@using System.ComponentModel.DataAnnotations
@using DriverGuide.Domain.Models
@using DriverGuide.UI.Utils
@inject HttpClient Http
@inject IJSRuntime JS


<div class="quiz-container">
    @if (currentQuestion is null)
    {
        <div class="quiz-loading">
            <div class="spinner"></div>
            <p style="text-align: center; font-size: 2rem; font-weight: bold; margin-top: 1.5rem;">
                Trwa przygotowanie pytań testowych dla kategorii @Category ...
            </p>
        </div>
    }
    else
    {
        <p style="text-align: center; font-size: 2rem; font-weight: bold;">Test na prawo jazdy kategorii @Category</p>

        <p class="progress-text">Pytanie @(currentIndex + 1) z @questionsCount</p>
        <div class="progress-container">
            <div class="progress-bar" style="width:@ProgressPercent%"></div>
        </div>

        <div class="quiz-question">

            @if (!string.IsNullOrEmpty(currentQuestion.Media))
            {
                if (currentQuestionHasVideo)
                {
                    <video controls class="question-image" style="display: block; margin-left: auto; margin-right: auto; width: 1000px; height: 400px; object-fit: contain;">
                        @if (!string.IsNullOrEmpty(videoUrl))
                        {
                            <source src="@videoUrl" type="@Utils.ExtensionUtils.GetMimeType(currentQuestion.Media)" />
                        }
                        else if (!string.IsNullOrEmpty(currentQuestion.Media))
                        {
                            <source src="@currentQuestion.Media" type="@Utils.ExtensionUtils.GetMimeType(currentQuestion.Media)" />
                        }
                        Nieobsługiwany typ.
                    </video>
                }
                else
                {
                    <img src="@currentQuestion.Media" alt="Question image" class="question-image" style="display: block; margin-left: auto; margin-right: auto; width: 1000px; height: 400px; object-fit: contain;" />
                }
            }

            <p class="question-text" style="text-align: center; font-size: 1.5rem; font-weight: bold;">@currentQuestion.Pytanie</p>

            <div class="answers-list">
                @foreach (var answer in GetCurrentQuestionAnswers())
                {
                    <div class="answer-option">
                        <input type="radio" id="@answer" name="answer" value="@answer" @onchange="() => selectedAnswer = answer" checked="@(selectedAnswer == answer)" />
                        <label style="font-size: 0.5rem" for="@answer">@answer</label>
                    </div>
                }
            </div>

            <div class="submit-section">
                <div class="submit-section-right" style="margin: 0;">
                    <button class="btn btn-primary" @onclick="SubmitAnswer" disabled="@(string.IsNullOrWhiteSpace(selectedAnswer))">
                        @if (currentIndex == questionsCount)
                        {
                            <b>Zakończ test</b>
                        }
                        else
                        {
                            <b>Następne pytanie</b>
                        }
                    </button>
                </div>
            </div>

        </div>
    }
</div>

@code {
    [Parameter]
    public string? Category { get; set; }

    private double questionsCount => questions?.Count ?? 32;
    private double ProgressPercent => ((double)(currentIndex + 1) / questionsCount) * 100;

    private string? videoUrl;
    private int currentIndex = 0;
    private string? selectedAnswer;
    private bool currentQuestionHasVideo;

    private Question? currentQuestion;
    private List<Question>? questions;
    private List<QuestionFile>? questionsFiles;

    protected override async Task OnInitializedAsync()
    {
        questions?.Clear();
        var httpResponse = await Http.GetAsync($"/Question/GetQuizQuestions?category={Category}");
        if (!httpResponse.IsSuccessStatusCode)
            return;

        var response = await httpResponse.Content.ReadFromJsonAsync<List<Question>>();
        questions = response ?? new();

        var questionNames = questions.Where(x => !string.IsNullOrWhiteSpace(x.Media)).Select(x => x.Media).GroupBy(x => x).Select(x => x.Key).ToList();
        questionsFiles = await GetQuestionFilesByNamesAsync(questionNames) ?? new(); //

        NextQuestion();
    }

    private async Task<List<QuestionFile>> GetQuestionFilesByNamesAsync(List<string> questionFileNames)
    {
        if (!questionFileNames.Any())
            return default;

        var query = string.Join("&", questionFileNames.Select(x => $"questionFileNames={Uri.EscapeDataString(x)}"));
        var httpResponse = await Http.GetAsync($"/QuestionFile/GetQuestionFilesByNames?{query}");
        if (!httpResponse.IsSuccessStatusCode)
            return default;

        var result = await httpResponse.Content.ReadFromJsonAsync<List<QuestionFile>>();
        return result;
    }

    private async Task LoadQuestionAsync()
    {
        if (questions is null)
            return;

        if (currentIndex > questions.Count)
            return;

        selectedAnswer = null;
        currentQuestion = questions[currentIndex];
        currentQuestionHasVideo = !string.IsNullOrEmpty(currentQuestion?.Media) &&
                                  (currentQuestion.Media.EndsWith(".wmv", StringComparison.OrdinalIgnoreCase) ||
                                   currentQuestion.Media.EndsWith(".mp4", StringComparison.OrdinalIgnoreCase) ||
                                   currentQuestion.Media.EndsWith(".webm", StringComparison.OrdinalIgnoreCase) ||
                                   currentQuestion.Media.EndsWith(".ogg", StringComparison.OrdinalIgnoreCase));

        if (currentQuestionHasVideo)
            videoUrl = await GetVideoUrl();
        else
            videoUrl = null;

        StateHasChanged();
    }

    private async Task<string> GetVideoUrl()
    {
        var file = questionsFiles.FirstOrDefault(x => x.Name == currentQuestion.Media);
        if (file is null)
            return default;

        string result = await JS.InvokeAsync<string>("createObjectURL", file.File, file.ContentType);
        return result;
    }

    private void SubmitAnswer()
    {
        if (selectedAnswer != null && currentQuestion != null)
            NextQuestion();
    }

    private async void NextQuestion()
    {
        currentIndex++;
        if (currentIndex > questions.Count)
            currentIndex = 0;

        await LoadQuestionAsync();
    }

    private IEnumerable<string> GetCurrentQuestionAnswers()
    {
        List<string> result = new();
        if (questions is null || currentQuestion is null)
            return result;

        if (string.IsNullOrWhiteSpace(currentQuestion.OdpowiedzA) && string.IsNullOrWhiteSpace(currentQuestion.OdpowiedzB) && string.IsNullOrWhiteSpace(currentQuestion.OdpowiedzC))
            result.AddRange(new[] { "Tak", "Nie" });
        else
            result.AddRange(new[] { currentQuestion.OdpowiedzA!, currentQuestion.OdpowiedzB!, currentQuestion.OdpowiedzC! });

        return result;
    }
}

<style>
    .submit-section-right {
        display: flex;
        justify-content: flex-end;
    }

    :root {
        --primary: #2d6cdf;
        --primary-dark: #1b417a;
        --accent: #f7b32b;
        --background: #f4f7fa;
        --surface: #fff;
        --text: #222;
        --text-light: #fff;
        --danger: #e74c3c;
        --success: #27ae60;
    }

    body {
        background: var(--background);
        color: var(--text);
        font-family: 'Segoe UI', Arial, sans-serif;
        margin: 0;
        padding: 0;
    }

    .navbar {
        background: var(--primary);
        color: var(--text-light);
        padding: 0.5rem 0;
        box-shadow: 0 2px 8px rgba(44, 108, 223, 0.08);
        margin-bottom: 2rem;
    }


    .quiz-container {
        max-width: 1400px;
        margin: 2rem auto;
        background: rgba(255, 255, 255, 0.85); /* semi-transparent white */
        border-radius: 12px;
        box-shadow: 0 2px 16px rgba(44, 108, 223, 0.08);
        padding: 0.5rem 1.5rem 0.5rem 1.5rem;
    }

    .quiz-question {
        margin-top: 1.5rem;
    }

    .question-text {
        font-size: 1.15rem;
        font-weight: 500;
        margin-bottom: 1rem;
    }

    .question-image {
        max-width: 100%;
        border-radius: 8px;
        margin-bottom: 1em;
        border: 1px solid #e0e0e0;
    }

    .btn {
        padding: 0.5em 1.2em;
        border: none;
        border-radius: 6px;
        font-size: 1rem;
        cursor: pointer;
        margin-right: 0.5em;
        margin-bottom: 0.5em;
        transition: background 0.2s;
    }

    .btn-primary {
        background: var(--primary);
        color: var(--text-light);
    }

        .btn-primary:hover {
            background: var(--primary-dark);
        }

    .btn-secondary {
        background: var(--accent);
        color: var(--text);
    }

        .btn-secondary:hover {
            background: #e6a21a;
        }

    .btn:disabled {
        background-color: #cccccc;
        cursor: not-allowed;
    }

    .answers-list {
        margin-top: 1em;
        margin-bottom: 1em;
    }

    .answer-option {
        margin-bottom: 0.5em;
        display: flex;
        align-items: center;
    }

        .answer-option input[type="radio"] {
            accent-color: var(--primary);
            margin-right: 0.5em;
        }

    .submit-section {
        margin-top: 2em;
        margin-bottom: 0em;
    }

    .result-section {
        margin-top: 1.5em;
    }

    .result-correct {
        color: var(--success);
        font-weight: 600;
        font-size: 1.1em;
    }

    .result-incorrect {
        color: var(--danger);
        font-weight: 600;
        font-size: 1.1em;
    }

    .next-section {
        margin-top: 1em;
    }

    .progress-container {
        width: 100%;
        background-color: #ddd;
        border-radius: 10px;
        overflow: hidden;
        margin-bottom: 10px;
        height: 10px;
    }

    .progress-bar {
        height: 100%;
        background-color: cornflowerblue;
        transition: width 0.3s ease;
    }

    .progress-text {
        font-size: 0.9em;
        color: #555;
        text-align: right;
        margin-bottom: 0px;
    }

    .quiz-loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 350px;
    }

    .spinner {
        width: 64px;
        height: 64px;
        border: 8px solid #e0e0e0;
        border-top: 8px solid var(--primary, #2d6cdf);
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-top: 2rem;
    }
</style>